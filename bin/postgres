#!/bin/bash
#
# Postgres container script
#
# PostgreSQL is installed inside an Ubuntu Singularity container image within minimal customization.
# The default /etc configuration for Postgres and SSL are copied out as a skeleton for the starting point.
# A few different workflows are provided for.


BIN_DIR=${0%/*}
PREFIX=${BIN_DIR%/*}
IMG=${BIN_DIR}/postgres.sif

set -e

function run_container() {
	apptainer exec --no-home --bind ${PWD}:${PWD} $IMG "$@"
}


function run_container_with_bind() {
	DB=$1; shift
	apptainer exec --no-home --bind ${PWD}:${PWD} \
	--bind $DB/var/run:/var/run/postgresql \
	--bind $DB/var/lib:/var/lib/postgresql/cur/main \
	--bind $DB/var/log:/var/log/postgresql/cur/main \
	--bind $DB/etc/postgresql:/etc/postgresql/cur/main \
	--bind $DB/etc/ssl:/etc/ssl \
	--bind $DB/etc/postgrest:/etc/postgrest \
	$IMG "$@"
}


function pg_initdb() {
	if [ $# -eq 0 ]
	then
		pg_initdb_usage
		return 1
	fi
	OPT="$1"; shift
	case "${OPT}" in
		-h | --help)
			pg_initdb_help
			return 1
			;;
		*)
			;;
	esac
	if [ -d "${OPT}" ]
	then
		echo "Error: cannot initialize existing data directory (${OPT})" 1>&2
		return 1
	else
		mkdir -p ${OPT}/etc/ssl/certs
		mkdir -p ${OPT}/etc/ssl/private
		mkdir -p ${OPT}/var/lib
		mkdir -p ${OPT}/var/log
		mkdir -p ${OPT}/var/run

		run_container cp /etc/ssl/private/ssl-cert-snakeoil.key ${OPT}/etc/ssl/private/ssl-cert-snakeoil.key
		run_container cp /etc/ssl/certs/ssl-cert-snakeoil.pem ${OPT}/etc/ssl/certs/ssl-cert-snakeoil.pem
		run_container scp -r /etc/postgresql/cur/main ${OPT}/etc/postgresql
		run_container_with_bind "${OPT}" initdb -D /var/lib/postgresql/cur/main

		mkdir -p ${OPT}/var/run/$(cat ${OPT}/var/lib/PG_VERSION)-main.pg_stat_tmp
		chmod -R go-rwx ${OPT}/etc

		cat <<-EOF
		Using this containerized environment,
		you can run:	${0} run ${OPT}
		EOF
	fi
}


function pg_initdb_usage() {
# usage: pg_initdb_usage
# Print usage statement for 'postgres initdb'
	cat <<-EOF 2>/dev/null
	usage: postgres initdb <DATA_DIR>
	Initialize database directory.
	EOF
}


function pg_initdb_help() {
# usage: pg_initdb_help
# Print full help statement for 'postgres initdb'
	pg_initdb_usage
	cat <<-EOF 2>/dev/null

	options:
	-h, --help         Show this message and exit.
	EOF
}


function pg_tune() {
	if [ $# -eq 0 ]
	then
		pg_tune_usage
		return 1
	fi
	OPT="$1"; shift
	case "${OPT}" in
		-h | --help)
			pg_tune_help
			return 1
			;;
		*)
			;;
	esac
	run_container_with_bind "$OPT" timescaledb-tune --conf-path=$OPT/etc/postgresql/postgresql.conf "$@"
}


function pg_tune_usage() {
# usage: pg_tune_usage
# Print usage statement for 'postgres tune'
	cat <<-EOF 2>/dev/null
	usage: postgres tune <DATA_DIR> [OPTS...]
	Tune database configuration.

	example:
		bin/postgres tune mydb --help
		bin/postgres tune mydb -yes
	EOF
}


function pg_tune_help() {
# usage: pg_tune_help
# Print full help statement for 'postgres tune'
	pg_tune_usage
	cat <<-EOF 2>/dev/null

	options:
	-h, --help         Show this message and exit.
	EOF
}


function pg_run() {
	if [ $# -eq 0 ]
	then
		pg_run_usage
		return 1
	fi
	OPT="$1"; shift
	case "${OPT}" in
		-h | --help)
			pg_run_help
			return 1
			;;
		*)
			;;
	esac
	run_container_with_bind "$OPT" postgres "$@" -c config_file=/etc/postgresql/cur/main/postgresql.conf
}


function pg_run_usage() {
# usage: pg_run_usage
# Print usage statement for 'postgres run'
	cat <<-EOF 2>/dev/null
	usage: postgres run <DATA_DIR> [OPTS...]
	Run PostgreSQL server.
	EOF
}


function pg_run_help() {
# usage: pg_run_help
# Print full help statement for 'postgres run'
	pg_run_usage
	cat <<-EOF 2>/dev/null

	options:
	-h, --help         Show this message and exit.
	EOF
}


function pg_client() {
	if [ $# -eq 0 ]
	then
		pg_client_usage
		return 1
	fi
	OPT="$1"; shift
	case "${OPT}" in
		-h | --help)
			pg_client_help
			return 1
			;;
		*)
			;;
	esac
	run_container_with_bind "$OPT" psql "$OPT" "$@"
}


function pg_client_usage() {
# usage: pg_client_usage
# Print usage statement for 'postgres run'
	cat <<-EOF 2>/dev/null
	usage: postgres client <DATA_DIR> [OPTS...]
	Run PostgreSQL client.
	EOF
}


function pg_client_help() {
# usage: pg_client_help
# Print full help statement for 'postgres client'
	pg_client_usage
	cat <<-EOF 2>/dev/null

	options:
	-h, --help         Show this message and exit.
	EOF
}


function pg_admin() {
	if [ $# -eq 0 ]
	then
		pg_admin_usage
		return 1
	fi
	OPT="$1"; shift
	case "${OPT}" in
		-h | --help)
			pg_admin_help
			return 1
			;;
		*)
			;;
	esac
	port=$(grep ^port ${OPT}/etc/postgresql/postgresql.conf | awk '{print $3;}')
	echo "using command line: psql postgres -p ${port} $@" 1>&2
	run_container_with_bind "$OPT" /usr/lib/postgresql/cur/bin/psql postgres -p ${port} "$@"
}


function pg_admin_usage() {
# usage: pg_admin_usage
# Print usage statement for 'postgres admin'
	cat <<-EOF 2>/dev/null
	usage: postgres admin <DATA_DIR> [OPTS...]
	Run PostgreSQL server.
	EOF
}


function pg_admin_help() {
# usage: pg_admin_help
# Print full help statement for 'postgres admin'
	pg_admin_usage
	cat <<-EOF 2>/dev/null

	options:
	-h, --help         Show this message and exit.
	EOF
}



function pg_rest() {
	if [ $# -eq 0 ]
	then
		pg_rest_usage
		return 1
	fi
	OPT="$1"; shift
	case "${OPT}" in
		-h | --help)
			pg_rest_help
			return 1
			;;
		*)
			;;
	esac
	echo "using command line: postgrest $@" 1>&2
	run_container_with_bind "$OPT" /usr/local/bin/postgrest "$@"
}


function pg_rest_usage() {
# usage: pg_rest_usage
# Print usage statement for 'postgresd'
	cat <<-EOF 2>/dev/null
	usage: postgresd <conf-file>
	Run PostgREST web-server.
	EOF
}


function pg_rest_help() {
# usage: pg_rest_help
# Print full help statement for 'postgres admin'
	pg_rest_usage
	cat <<-EOF 2>/dev/null

	options:
	-h, --help         Show this message and exit.
	EOF
}





function pg_version() {
	apptainer --version
	run_container postgres --version
}


function pg_usage() {
	cat <<-EOF 2>/dev/null
	usage: postgres [-h] <command> <DATA_DIR> [OPTS...]
	Run PostgreSQL as a container.
	EOF
}


function pg_help() {
	pg_usage
	cat <<-EOF 2>/dev/null

	commands:
	initdb             Initialize database directory.
	tune               Tune configuration.
	run                Run PostgreSQL server.
	admin              Run PostgreSQL admin client.
	client             Run PostgreSQL client.
	rest               Run PostgREST server

	options:
	-h, --help         Show this message and exit.
	-v, --version      Show Singularity and PostgreSQL versions and exit.
	EOF
}


function main() {
	if [ $# -eq 0 ]
	then
		pg_usage
		return 1
	fi
	cmd=$1
	shift
	case $cmd in
		(initdb|tune|run|admin|client|rest)
			pg_$cmd "$@"
			;;
		(-h|--help)
			pg_help
			;;
		(-v|--version)
			pg_version
			;;
		*)
			echo "Error: $cmd is not a subcommand" 1>&2
			;;
	esac
	return 0
}


main "$@"
exit $?
